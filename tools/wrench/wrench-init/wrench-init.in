
import argparse
import logging
import os
import shutil

logger = logging.getLogger(__name__)

def _configure_logging(debug):
    """
    Configure the application's logging.
    :param debug: whether debugging is enabled
    """
    if debug:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)

    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s [%(levelname)s] %(message)s')
    ch.setFormatter(formatter)
    logger.addHandler(ch)

def _create_subdirectories(project_dir):
    """
    Create the subdirectories for the project
    :param project_dir: project directory
    """
    logger.debug('Creating subdirectories structure')
    sub_dirs = ['CMakeModules', 'src', 'include', 'build', 'data']
    for sub_dir in sub_dirs:
        if not os.path.isdir(project_dir + '/' + sub_dir):
            os.mkdir(project_dir + '/' + sub_dir)
            logger.debug('  Created subdirectory: %s' % project_dir + '/' + sub_dir)

def _create_file(content, file_path):
    ascii_file = open(file_path, "w")
    ascii_file.write(content)
    ascii_file.close()

def main():
    # Application's arguments
    parser = argparse.ArgumentParser(description='Create a skeleton for a WRENCH-based simulator source code.')
    parser.add_argument('project_dir', metavar='PROJECT_DIR', help='Project directory name')
    parser.add_argument('-a', '--api', action='store', metavar='API',
                        help='Specify which API (action or workflow)', default='action')
    parser.add_argument('-d', '--debug', action='store_true', help='Print debug messages to stderr')
    parser.add_argument('-f', '--force', action='store_true',
                        help='Overwrites existing project directory (use sparingly)')
    args = parser.parse_args()

    # Configure logging
    _configure_logging(args.debug)

    # Sanity check
    if os.path.isdir(args.project_dir) and not args.force:
        logger.error('The provided project directory already exists:\n\t%s\nUse --force to overwrite the directory' \
                     % args.project_dir)
        exit(1)

    if args.api:
        args.api = args.api.lower()
        if args.api not in ['action', 'workflow']:
            logger.error('Invalid API specification: %s' % args.api)
            exit(1)

    logger.info('Creating WRENCH skeleton project at: %s' % args.project_dir)

    if not os.path.isdir(args.project_dir):
        os.mkdir(args.project_dir)

    # subdirectories structure
    _create_subdirectories(args.project_dir)

    # Copy all relevant files
    _create_file(FILE_CONTENT_CMAKELISTS_TXT, args.project_dir + "/CMakeLists.txt")
    _create_file(FILE_CONTENT_FINDSIMGRID_CMAKE, args.project_dir + "/CMakeModules/FindSimGrid.cmake")
    _create_file(FILE_CONTENT_PLATFORM_XML, args.project_dir + "/data/platform.xml")

    if (args.api == "workflow"):
        _create_file(FILE_CONTENT_SIMULATOR_WORKFLOW_CPP, args.project_dir + "/src/Simulator.cpp")
        _create_file(FILE_CONTENT_CONTROLLER_WORKFLOW_CPP, args.project_dir + "/src/Controller.cpp")
        _create_file(FILE_CONTENT_CONTROLLER_WORKFLOW_H, args.project_dir + "/include/Controller.h")
    else:
        _create_file(FILE_CONTENT_SIMULATOR_ACTION_CPP, args.project_dir + "/src/Simulator.cpp")
        _create_file(FILE_CONTENT_CONTROLLER_ACTION_CPP, args.project_dir + "/src/Controller.cpp")
        _create_file(FILE_CONTENT_CONTROLLER_ACTION_H, args.project_dir + "/include/Controller.h")

    logger.info('A WRENCH-based skeleton project using the %s API has been created in directory %s' % (
        args.api, args.project_dir))

if __name__ == '__main__':
    main()
