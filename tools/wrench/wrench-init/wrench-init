#!/usr/bin/env python3
#
# Copyright (c) 2019-2021. The WRENCH Team.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#

import argparse
import logging
import os

logger = logging.getLogger(__name__)


def _configure_logging(debug):
    """
    Configure the application's logging.
    :param debug: whether debugging is enabled
    """
    if debug:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)

    ch = logging.StreamHandler()
    ch.setLevel(logging.DEBUG)
    formatter = logging.Formatter('%(asctime)s [%(levelname)s] %(message)s')
    ch.setFormatter(formatter)
    logger.addHandler(ch)


def _create_subdirectories(project_dir):
    """
    Create the subdirectories for the project
    :param project_dir: project directory
    """
    logger.debug('Creating subdirectories structure')
    sub_dirs = ['CMakeModules', 'src', 'build', 'data']
    for sub_dir in sub_dirs:
        if not os.path.isdir(project_dir + '/' + sub_dir):
            os.mkdir(project_dir + '/' + sub_dir)
            logger.debug('  Created subdirectory: %s' % project_dir + '/' + sub_dir)


def main():
    # Application's arguments
    parser = argparse.ArgumentParser(description='Create a skeleton for a WRENCH-based simulator source code.')
    parser.add_argument('project_dir', metavar='PROJECT_DIR', help='Project directory name')
    parser.add_argument('-a', '--api', action='store', metavar='API',
                        help='Specify which API (action or workflow)', default='action')
    parser.add_argument('-d', '--debug', action='store_true', help='Print debug messages to stderr')
    parser.add_argument('-f', '--force', action='store_true',
                        help='Overwrites existing project directory (use sparingly)')
    args = parser.parse_args()

    # Configure logging
    _configure_logging(args.debug)

    # Sanity check
    if os.path.isdir(args.project_dir) and not args.force:
        logger.error('The provided project directory already exists:\n\t%s\nUse --force to overwrite the directory' \
                     % args.project_dir)
        exit(1)

    if args.api:
        args.api = args.api.lower()
        if args.api not in ['action', 'workflow']:
            logger.error('Invalid API specification: %s' % args.api)
            exit(1)

    logger.info('Creating WRENCH skeleton project at: %s' % args.project_dir)

    if not os.path.isdir(args.project_dir):
        os.mkdir(args.project_dir)

    # subdirectories structure
    _create_subdirectories(args.project_dir)

    # write CMakeLists.txt
    _write_cmakelists(args.project_dir)

    # write CMakeModules/FindSimGrid.cmake
    _write_findsimgridcmake(args.project_dir + "/CMakeModules/")

    # create SimpleWMS
    _write_simple_wms(args.project_dir)

    # create SimpleScheduler
    _write_simple_scheduler(args.project_dir, args.compute_service)

    # create SimpleSimulator.cpp
    _write_main(args.project_dir, args.compute_service)

    # create platform example file
    _write_platform(args.project_dir, args.compute_service)

    logger.info('A WRENCH-based skeleton project with a "%s" compute service has been created at: %s' % (
        args.compute_service, args.project_dir))


if __name__ == '__main__':
    main()
